class Editor extends React.Component {
  componentWillMount() {
    //check if ckEditor is loaded
    if(CKEDITOR) {
      console.log('Loaded ck editor');
    }
  }
  
  componentDidMount() {
    //once mounted, find the textarea with id 'editor' and convert it into CKEditor
    var ckEditor = CKEDITOR.replace('editor');
    ckEditor.on('change', (event) => {
      var newData = event.editor.getData();
      if(newData.length)
        this.props.changeAction(newData);
    });  
  }
  
  componentWillReceiveProps(nextProps) {
    //if passed prop 'text' changes to empty, reset the editor
    if(nextProps.text === '') 
      CKEDITOR.instances.editor.setData( '' );
  }
  
  componentWillUnmount() {
    //destroy ckeditor instance before unmounting textarea
    CKEDITOR.instances.editor.destroy();
  }
  
  render() {
    return (<textarea id="editor" />)
  }
}

//defining the required type of props for editor component
Editor.propTypes = {
  changeAction: React.PropTypes.func,
  bio: React.PropTypes.string
};

//Parent component
class Profile extends React.Component { 
  constructor(props) {
    super(props);
    this.state = {
      height: 100,
      bio: this.props.bio,
      showEditor: false,
    };
    this.setBio = this.setBio.bind(this);
    this.resetBio = this.resetBio.bind(this);
    this.toggleEditor = this.toggleEditor.bind(this);
  }
  
  toggleEditor(show) {
    this.setState({ showEditor: show });
  }
  
  setBio(newBio) {
    this.setState({bio: newBio});
  }
  
  resetBio()  {
    this.setState({ bio: '' });
  }
  
  render() {
    var { name, age, pic } = this.props;
    var { height , bio} = this.state;
    
    return (
      <div className="panel panel-primary profile text-center">
        <div className="panel-heading">My Profile</div>
        <div className="panel-body">
          <div className="pull-right badge" onClick={this.toggleEditor.bind(this, true)}>
           <span className="glyphicon glyphicon-pencil" aria-hidden="true"></span> Edit
          </div>
          {this.state.showEditor ?
            (<div>
              <div className="pull-right badge" onClick={this.toggleEditor.bind(this, false)}>
                <span className="glyphicon glyphicon-floppy-disk" aria-hidden="true"></span> Save
              </div>
              <div className="pull-right badge" onClick={this.resetBio}>
                <span className="glyphicon glyphicon-refresh" aria-hidden="true"></span> Reset
              </div>
            </div>) :
            (null)
          }
          <h2>{name}</h2>
          <h4>Age: {age}</h4>
          <h4 ref="bio">Bio: {bio}</h4>
          {this.state.showEditor ? (<Editor changeAction={this.setBio} text={bio}/>) : (null)}
        </div>
      </div>
    );
  }
}

React.render(<Profile name="Ketan Saxena" age={24} bio="JS enthusiast with blurred history in Java." pic="https://media.licdn.com/mpr/mpr/shrinknp_200_200/p/6/005/081/086/2f5c4dc.jpg" />, document.getElementById('app'));